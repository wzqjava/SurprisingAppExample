apply plugin: 'com.android.application'
apply plugin: 'com.antfortune.freeline' //  阿里Android团队一款针对Android平台的增量编译工具

android {
    //国内镜像地址来下载  $ ./gradlew initFreeline -Pmirror
    freeline {
        hack true
        productFlavor 'zyp'
    }

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.zyp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true



        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\"" // 输出2017-06-16 11:46:42
        buildConfigField "String", "BUILD_HOST", "\"${hostName()}\""
        // 输出zhangyipeng@localhost，这是我的电脑的用户名和PC名
        buildConfigField "String", "LASR_GIT_COMMIT_SHA", "\"${revision()}\""
        // 输出9def3d3, 这是最后一次commit的sha值

        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_git_revision", revision()
        /**
         * 在Activity里调用
         * getString(R.string.build_time)  // 输出2017-06-16 11:46:42
         * getString(R.string.build_host)  // 输出zhangyipeng@localhost，这是我的电脑的用户名和PC名
         * getString(R.string.build_git_revision) // 输出9def3d3, 这是最后一次commit的sha值
         */
        flavorDimensions "versionCode"
    }

    signingConfigs {
//        //加载资源
//        Properties properties = new Properties()
//        InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream();
//        properties.load(inputStream)
//        //读取字段
//        def value = properties.getProperty('key')

        debug {
            storeFile file("debug.keystore")
            keyAlias 'AndroidDebugKey'
            storePassword 'android'
            keyPassword 'android'
        }

        release {
            storeFile file(storeFileValue)
            keyAlias keyAliasValue
            storePassword keyPasswordValue
            keyPassword storePasswordValue
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders = [app_label: "@string/app_name_debug"]
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "zyp"]
            manifestPlaceholders = [BAIDU_API_KEY_VALUE: "CC939499621bc8191c63799999b1f987", UMENG_APPKEY_VALUE: "4ef289045270156bd6999998"]

            buildConfigField "String", "BASE_URL", "\"${debug_base_url}\""
            buildConfigField "String[]", "BASE_TEST_URL", "{\"https://api.test\", \"https://api.test1\", \"https://api.test2\", \"https://api.test3\", \"https://api.test4\"}"
            buildConfigField "boolean", "IS_LOG", "true"
            buildConfigField "boolean", "IS_DEBUG", "true"

            debuggable true
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            manifestPlaceholders = [app_label: "@string/app_name"]
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "zyp"]
            manifestPlaceholders = [BAIDU_API_KEY_VALUE: "CC939499621bc8191c63799999b1f987", UMENG_APPKEY_VALUE: "4ef289045270156bd6999998"]

            buildConfigField "String", "BASE_URL", "\"${release_base_url}\""
            buildConfigField "String[]", "BASE_TEST_URL", "{\"https://api.release1\", \"https://api.release2\"}"
            buildConfigField "boolean", "IS_LOG", "false"
            buildConfigField "boolean", "IS_DEBUG", "false"


            debuggable false
            zipAlignEnabled true
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            def fileName
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                // 输出apk名称为zyp_v1.0.0_wandoujia.apk
                if (variant.buildType.name.equals('release')) {
                    fileName = "zyp_v${defaultConfig.versionName}_${variant.productFlavors[0].name}_release.apk"
                } else if (variant.buildType.name.equals('debug')) {
                    fileName = "zyp_v${defaultConfig.versionName}_${variant.productFlavors[0].name}_debug.apk"
                }
//                output.outputFile = new File(outputFile.parent, fileName)
                println "====>${fileName}"

            }
        }
    }

    // 友盟多渠道打包
    productFlavors {
        zyp {}
        //		_360yingyong {}
        //		yingyongbao {}
        //		baidushouzhu {}
        //		xiaomi {}
        //		wandoujia {}
        //		anzhi {}
        //		jifeng {}
        //		liantongwo {}
        //		yidongmm {}
        //		huawei {}
        //		lianxiang {}
        //		meizu {}
        //		oppo {}
        //		leshi {}
        //		mumayi {}
        //		nduowang {}
        //		wangyi {}
        //		sinaweibo {}
        //		sougoushouzhu {}
        //		google {}
        //		samsung {}
        //		vivo{}
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]

    }

    dexOptions {
        preDexLibraries = false
        jumboMode = false
        javaMaxHeapSize "4g"
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/rxjava.properties'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets.main {
//        jniLibs.srcDirs = ['libs/jniLibs']
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation("com.android.support.test.espresso:espresso-core:${espressoCore}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation "junit:junit:${junit}"

    implementation "com.android.support:appcompat-v7:${appcompatV7}"
    implementation "com.android.support.constraint:constraint-layout:${constraintLayout}"
    implementation "com.android.support:design:${design}"
    implementation "com.android.support:support-vector-drawable:${supportVectorDrawable}"
    // Crash全局异常捕获，用到了一个第三方库
    implementation "cat.ereza:customactivityoncrash:${customactivityoncrash}"

    //  引入的版本变量在root的build.gradle文件中;
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${leakcanaryVersion}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${leakcanaryVersion}"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${leakcanaryVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
}

task upload(type: Exec) {
    executable 'sh'
    args "-c", "../upload_pgyer.sh"
}

task uploadpython(type: Exec) {
    workingDir './'
    commandLine "python", "python_demo.py", "one", "two"
}




afterEvaluate {//编译前执行
    tasks.matching {
        it.name.startsWith('process') && (it.name.endsWith('ReleaseJavaRes') || it.name.endsWith
                ('DebugJavaRes'))
    }.each { task ->
        task.dependsOn(compliePre1, compliePre2)
    }
}

afterEvaluate {//apk打包后上传到蒲公英
    tasks.matching {
        it.name.startsWith('install') && it.name.contains("Release")
    }.each { task ->
        task.dependsOn(upload)
    }
}

afterEvaluate {
    tasks.findByName('assembleDebug').doLast {
        println "============buildApkDebug============="

    }
//    tasks.findByName('assembleRelease').doLast {
//        println "============buildApkRelease============="
//    }
}


def buildTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss")
}

def hostName() {
    return System.getProperty("user.name") + "@" + InetAddress.localHost.hostName
}

def revision() {
    def code = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code
    }
    return code.toString().trim()
}

/**
 * 我们创建了一个Task对象，同时把closure做为一个action加到这个Task的action队列中，
 * 并且告诉它“最后才执行这个closure”（注意，<<符号是doLast的代表）。
 */
task hello << {// <<符号是doLast的缩写,
    println 'Hello Earth'
}
hello.doFirst {
    println 'Hello Venus'
}
hello.doLast {
    println 'Hello Mars'
}
hello << {
    println 'Hello Jupiter'
}
task compliePre1 {
    println "============compliePre1============="
}
task compliePre2 {
    println "============compliePre2============="
}